def getWorkspace() {
    pwd().replace("%2F", "_")
}

def buildWindows(jobname, cmakeEnv) {
	def destination = new File('/b/' + jobname + '_' + env.BRANCH_NAME.replace("/", "_"))
	if(destination.exists()) destination.deleteDir()
	bat 'scripts/build_windows.cmd' + ' "' + cmakeEnv + '" ' + destination.absolutePath + ' ' + pwd()
}

def build_MinGW32(jobname) {
	node('windows') {
		ws(getWorkspace()) {
			stage("Checkout") {
				checkout scm
			}
		   
			stage("Build MinGW32") {
				withEnv(["PATH+MINGW=C:/Program Files (x86)/mingw-w64/i686-6.2.0-posix-dwarf-rt_v5-rev0/mingw32/bin"]) {
					buildWindows(jobname, "MinGW Makefiles")
				}
			}
		}
	}
}

def build_Linux(jobname) {
	node('linux') {
		ws(getWorkspace()) {
			stage("Checkout") {
				checkout scm
			}

			stage("Build Linux") {
				sh 'chmod +x scripts/build_linux.sh'
				sh 'scripts/build_linux.sh'
			}
		}
	}
}

def build_VS2015_32(jobname) {
	node('windows') {
		ws(getWorkspace()) {
			stage("Checkout") {
				checkout scm
			}

			stage("Build VS2015") {
				buildWindows(jobname, "Visual Studio 14 2015")
			}
		}
	}
}

def build_VS2015_64(jobname) {
	node('windows') {
		ws(getWorkspace()) {
			stage("Checkout") {
				checkout scm
			}

			stage("Build VS2015") {
				buildWindows(jobname, "Visual Studio 14 2015 Win64")
			}
		}
	}
}


def buildAndTest(jobname) {
	echo jobname
		if (jobname.toLowerCase().endsWith("mingw32")){
			build_MinGW32(jobname)
		}
		
		if (jobname.toLowerCase().endsWith("linux")){
			build_Linux(jobname)
		}
		
		if (jobname.toLowerCase().endsWith("vs2015_64")){
			build_VS2015_64(jobname)
		}
		
		if (jobname.toLowerCase().endsWith("vs2015_32")){
			build_VS2015_32(jobname)
		}
}

buildAndTest("${env.JOB_NAME}".tokenize( '/' )[0])